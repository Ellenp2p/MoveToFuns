---
import type { MarkdownHeading } from "astro";

type Props = {
  headings: MarkdownHeading[];
};
const { headings } = Astro.props;
---

<script>
  let tableOfContents: HTMLElement | null = null; 
   
  let headings: any[] | NodeListOf<Element> | null = null;
  let tocLinks: any[] | NodeListOf<HTMLAnchorElement> = [] ;

  function highlightActiveSection() {
    let currentActiveIndex = 0;
    if( !headings || !tocLinks || !tableOfContents) return;
    headings?.forEach((heading: { getBoundingClientRect: () => any; }, index: number) => {
      const rect = heading.getBoundingClientRect();
      const headerHeight = 6 * parseFloat(getComputedStyle(document.documentElement).fontSize); 

      if(rect.top <= 20 + headerHeight && rect.top > headerHeight) {
        currentActiveIndex = index;
      }else if( rect.top <= headerHeight ) {
        if (rect.bottom > headerHeight){
          currentActiveIndex = index;
        }else{
          currentActiveIndex = index;
        }
      };
    });

    tocLinks.forEach((link, index) => {
      if (index === currentActiveIndex) {
        link.classList.add('text-blue-600', 'dark:text-blue-500');
        link.classList.remove('text-gray-600', 'dark:text-gray-400');
      } else {
        link.classList.remove('text-blue-600', 'dark:text-blue-500');
        link.classList.add('text-gray-600', 'dark:text-gray-400');
      }
    });
  }
  highlightActiveSection();
  window.addEventListener('scroll', highlightActiveSection);
  document.addEventListener("astro:page-load", () => {
    tableOfContents = document.getElementById('tableOfContents');
    headings = document.querySelectorAll('.prose h1[id], .prose h2[id], .prose h3[id], .prose h4[id]');
    tocLinks = tableOfContents ? tableOfContents.querySelectorAll('a') : [];
    highlightActiveSection();
  });
</script>
<script is:inline>
  function scrollToSection(sectionId) {
    let yOffset = -100;

    let element = document.getElementById(sectionId);

    if (element) {
      let y =
        element.getBoundingClientRect().top + window.pageYOffset + yOffset;
      window.scrollTo({ top: y, behavior: "smooth" });
      event.preventDefault();
    }
  }
</script>
<div class="flex py-6 w-full h-full">
  <div class="sticky top-0 pt-28 h-fit w-full">
    <div
      class="flex flex-col px-4 gap-2 w-full border-solid border-l-2 text-sm"
      id="tableOfContents"
    >
      {
        headings.map(({ depth, slug, text }) => {
          let marginLeft;
          let fontWeight;
          switch (depth) {
            case 1:
              marginLeft = "ml-0";
              fontWeight = "font-bold";
              break;
            case 2:
              marginLeft = "ml-4";
              fontWeight = "font-semibold";
              break;
            case 3:
              marginLeft = "ml-8";
              fontWeight = "font-medium";
              break;
            case 4:
              marginLeft = "ml-12";
              fontWeight = "font-normal";
              break;
            default:
              marginLeft = `ml-${(depth - 1) * 2}`;
              fontWeight = "font-light";
              }
              return (
              <a
                href={`#${slug}`}
                onclick={`scrollToSection("${decodeURI(encodeURI(slug))}")`}
                class={`text-gray-600 hover:underline dark:text-gray-200 ${fontWeight} `+` ${marginLeft} ${depth > 1 ? "pl-2" : ""}`}
              >
                {text}
            </a>
          );
        })
      }
    </div>
  </div>
</div>
